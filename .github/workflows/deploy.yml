name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggers

env:
  AWS_REGION: us-east-1
  S3_BUCKET: themattyee.com-website
  CLOUDFORMATION_STACK: matt-yee-website

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        VITE_API_URL: https://x8nj23b2ej.execute-api.us-east-1.amazonaws.com/prod

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Run tests (if any)
      run: npm test -- --passWithNoTests || true

    - name: Deploy to S3
      run: |
        # Sync all files except index.html with long cache
        aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
          --delete \
          --cache-control "public, max-age=31536000" \
          --exclude "index.html" \
          --exclude "*.json"
        
        # Upload index.html and JSON files with no-cache
        aws s3 cp dist/index.html s3://${{ env.S3_BUCKET }}/index.html \
          --cache-control "no-cache, no-store, must-revalidate" \
          --content-type "text/html"
        
        # Upload JSON files with no-cache
        aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/ \
          --exclude "*" \
          --include "*.json" \
          --cache-control "no-cache, no-store, must-revalidate"

    - name: Get CloudFront Distribution ID
      id: cloudfront
      run: |
        DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.CLOUDFORMATION_STACK }} \
          --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
          --output text)
        echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

    - name: Invalidate CloudFront
      if: steps.cloudfront.outputs.distribution_id != ''
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ steps.cloudfront.outputs.distribution_id }} \
          --paths "/*"
        echo "‚úÖ CloudFront cache invalidated"

    - name: Update API URL in build (if needed)
      run: |
        # Get API Gateway URL from CloudFormation
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.CLOUDFORMATION_STACK }} \
          --query 'Stacks[0].Outputs[?OutputKey==`BlogApiUrl`].OutputValue' \
          --output text)
        echo "API URL: $API_URL"

    - name: Deployment Summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo ""
        echo "üìã Deployment Details:"
        echo "- S3 Bucket: ${{ env.S3_BUCKET }}"
        echo "- CloudFront Distribution: ${{ steps.cloudfront.outputs.distribution_id }}"
        echo "- Region: ${{ env.AWS_REGION }}"
        echo ""
        echo "üåê Website URLs:"
        aws cloudformation describe-stacks \
          --stack-name ${{ env.CLOUDFORMATION_STACK }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebsiteURL`].OutputValue' \
          --output text