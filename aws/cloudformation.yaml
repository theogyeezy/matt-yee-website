AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for Matt Yee personal website with blog'

Parameters:
  DomainName:
    Type: String
    Description: Domain name for the website
    Default: 'themattyee.com'
  
  CreateCertificate:
    Type: String
    Description: Whether to create ACM certificate
    Default: 'true'
    AllowedValues: ['true', 'false']

Conditions:
  HasDomain: !Not [!Equals [!Ref DomainName, '']]
  ShouldCreateCertificate: !And
    - !Condition HasDomain
    - !Equals [!Ref CreateCertificate, 'true']

Resources:
  # S3 Bucket for hosting static website
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${DomainName}-website'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # S3 Bucket Policy
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'

  # SSL Certificate (must be in us-east-1 for CloudFront)
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: ShouldCreateCertificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub 'www.${DomainName}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZone
        - DomainName: !Sub 'www.${DomainName}'
          HostedZoneId: !Ref HostedZone

  # Route53 Hosted Zone
  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: HasDomain
    Properties:
      Name: !Ref DomainName

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        PriceClass: PriceClass_100
        Aliases: !If
          - HasDomain
          - - !Ref DomainName
            - !Sub 'www.${DomainName}'
          - !Ref AWS::NoValue
        ViewerCertificate: !If
          - ShouldCreateCertificate
          - AcmCertificateArn: !Ref SSLCertificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true

  # DynamoDB Table for Blog Posts
  BlogPostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: matt-yee-blog-posts
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: published
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: published-date-index
          KeySchema:
            - AttributeName: published
              KeyType: HASH
            - AttributeName: date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Lambda Function for Blog API
  BlogApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: matt-yee-blog-api
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt BlogApiRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref BlogPostsTable
          ADMIN_PASSWORD_HASH: '' # Set this after deployment
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          const crypto = require('crypto');
          
          exports.handler = async (event) => {
            const headers = {
              'Content-Type': 'application/json',
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': 'Content-Type,Authorization',
              'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS'
            };
            
            if (event.httpMethod === 'OPTIONS') {
              return { statusCode: 200, headers, body: '' };
            }
            
            const path = event.path;
            const method = event.httpMethod;
            
            try {
              // GET /posts - List all published posts
              if (path === '/posts' && method === 'GET') {
                const params = {
                  TableName: process.env.TABLE_NAME,
                  IndexName: 'published-date-index',
                  KeyConditionExpression: 'published = :pub',
                  ExpressionAttributeValues: { ':pub': 'true' },
                  ScanIndexForward: false
                };
                const result = await dynamodb.query(params).promise();
                return {
                  statusCode: 200,
                  headers,
                  body: JSON.stringify(result.Items)
                };
              }
              
              // GET /posts/{id} - Get single post
              if (path.startsWith('/posts/') && method === 'GET') {
                const id = path.split('/')[2];
                const params = {
                  TableName: process.env.TABLE_NAME,
                  Key: { id }
                };
                const result = await dynamodb.get(params).promise();
                return {
                  statusCode: result.Item ? 200 : 404,
                  headers,
                  body: JSON.stringify(result.Item || { error: 'Post not found' })
                };
              }
              
              // POST /posts - Create new post (requires auth)
              if (path === '/posts' && method === 'POST') {
                const authHeader = event.headers.Authorization;
                if (!authHeader || !validateAuth(authHeader)) {
                  return { statusCode: 401, headers, body: JSON.stringify({ error: 'Unauthorized' }) };
                }
                
                const body = JSON.parse(event.body);
                const id = crypto.randomBytes(16).toString('hex');
                const item = {
                  id,
                  ...body,
                  date: new Date().toISOString(),
                  published: body.published ? 'true' : 'false'
                };
                
                await dynamodb.put({
                  TableName: process.env.TABLE_NAME,
                  Item: item
                }).promise();
                
                return {
                  statusCode: 201,
                  headers,
                  body: JSON.stringify(item)
                };
              }
              
              return {
                statusCode: 404,
                headers,
                body: JSON.stringify({ error: 'Not found' })
              };
            } catch (error) {
              return {
                statusCode: 500,
                headers,
                body: JSON.stringify({ error: error.message })
              };
            }
          };
          
          function validateAuth(authHeader) {
            // Simple auth check - improve this in production
            const token = authHeader.replace('Bearer ', '');
            const hash = crypto.createHash('sha256').update(token).digest('hex');
            return hash === process.env.ADMIN_PASSWORD_HASH;
          }

  # IAM Role for Lambda
  BlogApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt BlogPostsTable.Arn
                  - !Sub '${BlogPostsTable.Arn}/index/*'

  # API Gateway
  BlogApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: matt-yee-blog-api
      Description: API for Matt Yee blog
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  BlogApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApi
      ParentId: !GetAtt BlogApi.RootResourceId
      PathPart: '{proxy+}'

  # API Gateway Method
  BlogApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApi
      ResourceId: !Ref BlogApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogApiFunction.Arn}/invocations'

  # Lambda Permission for API Gateway
  BlogApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BlogApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BlogApi}/*/*'

  # API Gateway Deployment
  BlogApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - BlogApiMethod
    Properties:
      RestApiId: !Ref BlogApi
      StageName: prod

  # Route53 DNS Records
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasDomain
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID (global)

  WWWDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasDomain
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'www.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID (global)

Outputs:
  WebsiteURL:
    Description: Website URL
    Value: !If
      - HasDomain
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
  
  CloudFrontURL:
    Description: CloudFront Distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
  
  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref WebsiteBucket
  
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
  
  BlogApiUrl:
    Description: Blog API URL
    Value: !Sub 'https://${BlogApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
  
  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref BlogPostsTable
  
  HostedZoneId:
    Description: Route53 Hosted Zone ID
    Condition: HasDomain
    Value: !Ref HostedZone
  
  NameServers:
    Description: Route53 Name Servers (configure these in your domain registrar)
    Condition: HasDomain
    Value: !Join [', ', !GetAtt HostedZone.NameServers]
  
  SSLCertificateArn:
    Description: SSL Certificate ARN
    Condition: ShouldCreateCertificate
    Value: !Ref SSLCertificate